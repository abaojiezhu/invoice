package com.ztessc.einvoice.interceptor;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.UnknownHostException;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.NamedThreadLocal;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.ztessc.einvoice.service.LogService;
import com.ztessc.einvoice.util.DateUtil;
import com.ztessc.einvoice.util.Log;
import com.ztessc.einvoice.util.PageData;
import com.ztessc.einvoice.util.ShiroUtil;
import com.ztessc.einvoice.util.UuidUtil;

public class LogInterceptor extends HandlerInterceptorAdapter {
	
	Logger log = Log.get();
	
	@Autowired
	private LogService logService;
	
	
	private NamedThreadLocal<String> sessionIdThreadLocal = new NamedThreadLocal<String>("StopWatch-SessionId");
	
	private NamedThreadLocal<PageData> currentUserThreadLocal = new NamedThreadLocal<PageData>("StopWatch-CurrentUser");
	
	@Override
	public boolean preHandle(HttpServletRequest request,
			HttpServletResponse response, Object handler) throws Exception {
		log.debug("===================开始请求 " + request.getRequestURL());
		
		try {
			//请求之前记录开始时间，用于记录请求总共耗时
			String sessionId = request.getSession().getId();
			request.setAttribute(sessionId, System.currentTimeMillis());
			
			sessionIdThreadLocal.set(sessionId);
			PageData currentUserData = ShiroUtil.getCurrentUserData();
			PageData pd = new PageData();
			if(currentUserData != null){
				pd.putAll(currentUserData);
			}
			ShiroUtil.setCurrentUserData(pd);
			currentUserThreadLocal.set(pd);
			
		} catch (Exception e) {
			log.error("",e);
		}
		return super.preHandle(request, response, handler);
	}
	
	@Override
	public void afterCompletion(HttpServletRequest request,
			HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		try {
			
			String sessionId = sessionIdThreadLocal.get();
			
			//请求开始时间
			long beginTime = (long) request.getAttribute(sessionId);
			//请求结束时间
			long endTime = System.currentTimeMillis();
		
		
			//请求url地址
			String url = parseURL(request.getRequestURL().toString());
			PageData currentUserData = currentUserThreadLocal.get();
			if(currentUserData == null){
				currentUserData = new PageData();
			}
			
			//客户端访问IP地址
			String ip = this.getIpAddr(request);
			
			//客户端访问类型(1=web，2=android，3=ios，4=weixin)
			String clientType = this.getClientType(request);
			
			//获取来源页地址
			String referer = request.getHeader("Referer");
			if(StringUtils.isNotBlank(referer) && referer.length() > 200) {
				referer = referer.substring(0,200);
			}
			String requestParams = this.getRequestParams(request);
			
			//操作结果和异常描述
			Object[] operaResult = this.getOperaResult(request);
			
			//记录日志详情
			PageData obj = new PageData();
			obj.put("id", UuidUtil.getUUID());
			obj.put("userId", currentUserData.getString("id"));
			obj.put("ip", ip);
			obj.put("mac", getMACAddress(ip));
			obj.put("beginTime", new Date(beginTime));
			obj.put("endTime", new Date(endTime));
			obj.put("useTime", (endTime-beginTime));
			obj.put("url", url);
			obj.put("referer", referer);
			obj.put("clientType", clientType);
			obj.put("operaResult", operaResult[0]);
			obj.put("exceptionMsg", operaResult[1]);
			obj.put("exceptionType", operaResult[2]);
			obj.put("requestParams", requestParams);
			obj.put("sessionId", sessionId);
			obj.put("createdDt", DateUtil.getCurrentDateTime());
			obj.put("systemVersion", System.getProperty("os.name"));
			
			
			//由于APP端每次请求的sessionId都是不同的，所以记录token
			if(clientType=="Z004002" || clientType=="Z004003"){
				obj.put("sessionId", currentUserData.getString("token"));
			}
			//日志类型（Z005001=登陆日志，Z005002=操作日志）
			if(url.contains("init/login")){ 
				obj.put("logType", "Z005001");
			}else{
				obj.put("logType", "Z005002");
			}
				
			
			logService.save(obj);
		} catch (Exception e) {
			log.error("保存操作日志异常",e);
		}
		log.debug("===================结束请求 "+ request.getRequestURL());
	}
	
	
  
	
	/**
	 * 请求参数
	 * @author: 徐益森
	 * @date: 2018年4月21日 上午9:24:35
	 * @param {}
	 * @return String
	 */
	private String getRequestParams(HttpServletRequest request) {
		PageData requestParams = new PageData(request);
		String params = null;
		if(requestParams != null && requestParams.size() > 0) {
			params = requestParams.toString();
			if(StringUtils.isNotBlank(params) && params.length() > 5000) {
				params = params.substring(0,5000);
			}
		}
		return params;
	}
	
	/**
	 * 操作结果
	 * @author: 徐益森
	 * @date: 2018年4月20日 上午11:14:21
	 * @param request
	 * @return String[0]操作结果(Y、N) String[1]异常描述
	 */
	private Object[] getOperaResult(HttpServletRequest request){
		String sessionId = sessionIdThreadLocal.get();
		Object[] array = new Object[3];
		//操作结果(Y=成功，N=失败)，默认成功,如果发现异常，则为失败,并记录异常原因
		array[0] = "Z006001";
		Object exception = request.getAttribute(sessionId+"_ERROR_KEY");
		if(exception != null){
			array[0] = "Z006002";
			
			Exception e = (Exception) exception;
			
			StringWriter sw = new StringWriter();
			e.printStackTrace(new PrintWriter(sw,true));
			String str = sw.toString();
			array[1] = str;
			array[2] = 1;
			
			//业务异常处理
			if(e.getClass().getName().endsWith("BizException")){
				array[1] = e.getMessage();
				array[2] = 2;
			}
		}
		return array;
	}
	
	
	/**
	 * 客户端IP
	 * @author: 徐益森
	 * @date: 2018年4月20日 上午11:14:11
	 * @param {}
	 * @return String
	 */
	private String getIpAddr(HttpServletRequest request) {
		String ip = request.getHeader("X-Forwarded-For");
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("X-Real-IP");
		}
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("Proxy-Client-IP");
		}
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("WL-Proxy-Client-IP");
		}
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getRemoteAddr();
			if(ip.equals("127.0.0.1") || ip.equals("0:0:0:0:0:0:0:1")){  
                //根据网卡取本机配置的IP  
                InetAddress inet=null;  
                try {  
                    inet = InetAddress.getLocalHost();  
                } catch (UnknownHostException e) {  
                    e.printStackTrace();  
                }  
                ip= inet.getHostAddress();  
            }
		}
		//对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割  
        if(ip!=null && ip.length()>15){ //"***.***.***.***".length() = 15  
            if(ip.indexOf(",")>0){  
            	ip = ip.substring(0,ip.indexOf(","));  
            }  
        }
		return ip;
	}
	
	/**
	 * 清理url中的jsessionid、参数等内容
	 * @author: 徐益森
	 * @date: 2018年4月20日 上午11:14:01
	 * @param {}
	 * @return String
	 */
	private String parseURL(String url){
		if(url != null){
			if(url.indexOf(";") != -1){
				url = url.split(";")[0];
			}
			if(url.indexOf("#") != -1){
				url = url.split("#")[0];
			}
			if(url.indexOf("?") != -1){
				url = url.split("\\?")[0];
			}
			if(url.endsWith("/")){
				url = url.substring(0, url.length()-1);
			}
			while(url.contains("//")){
				url = url.replace("//", "/");
			}
			url = url.replace(":/", "://");
			
			if(url.startsWith("http://")) {
				url = url.substring(7);
			}
			if(url.startsWith("https://")) {
				url = url.substring(8);
			}
		}
		return url;
	}
	
	/**
	 * 客户端访问类型(1=web，2=android，3=ios)
	 * @author: 徐益森
	 * @date: 2018年4月20日 上午11:13:34
	 * @param {}
	 * @return int
	 */
	private String getClientType(HttpServletRequest request){
		//客户端访问类型(1=web，2=android，3=ios)
		String clientType = "Z004001";
		if(StringUtils.isNotBlank(request.getHeader("platform"))) {
			String platform = request.getHeader("platform");
			if("android".equals(platform)) {
				clientType = "Z004002";
			}else if("ios".equals(platform)) {
				clientType = "Z004003";
			}
		}
		return clientType;
	}
	
	  /**   
     * 通过IP地址获取MAC地址   
     * @author TQM
     * @param ip String,127.0.0.1格式   
     * @return mac String   
     * @throws Exception   
     */      
    private String getMACAddress(String ip) throws Exception {      
        String line = "";      
        String macAddress = "";      
        final String MAC_ADDRESS_PREFIX = "MAC Address = ";      
        final String LOOPBACK_ADDRESS = "127.0.0.1";      
        //如果为127.0.0.1,则获取本地MAC地址。      
        if (LOOPBACK_ADDRESS.equals(ip)) {      
            InetAddress inetAddress = InetAddress.getLocalHost();      
            //     
            byte[] mac = NetworkInterface.getByInetAddress(inetAddress).getHardwareAddress();      
            //下面代码是把mac地址拼装成String      
            StringBuilder sb = new StringBuilder();      
            for (int i = 0; i < mac.length; i++) {      
                if (i != 0) {      
                    sb.append("-");      
                }      
                //mac[i] & 0xFF 是为了把byte转化为正整数      
                String s = Integer.toHexString(mac[i] & 0xFF);      
                sb.append(s.length() == 1 ? 0 + s : s);      
            }      
            //把字符串所有小写字母改为大写成为正规的mac地址并返回      
            macAddress = sb.toString().trim().toUpperCase();      
            return macAddress;      
        }      
        //获取非本地IP的MAC地址      
        try {      
            Process p = Runtime.getRuntime().exec("nbtstat -A " + ip);      
            InputStreamReader isr = new InputStreamReader(p.getInputStream());      
            BufferedReader br = new BufferedReader(isr);      
            while ((line = br.readLine()) != null) {      
                if (line != null) {      
                    int index = line.indexOf(MAC_ADDRESS_PREFIX);      
                    if (index != -1) {      
                        macAddress = line.substring(index + MAC_ADDRESS_PREFIX.length()).trim().toUpperCase();      
                    }      
                }      
            }      
            br.close();      
        } catch (IOException e) {      
            e.printStackTrace(System.out);      
        }      
        return macAddress;      
    }     
}
