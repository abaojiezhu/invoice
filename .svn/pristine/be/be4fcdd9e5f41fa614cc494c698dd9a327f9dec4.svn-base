package com.ztessc.einvoice.task;

import java.util.Date;
import java.util.concurrent.ScheduledFuture;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import org.springframework.scheduling.support.CronTrigger;
import org.springframework.web.bind.annotation.RequestMapping;

/**
 * 利用线程池实现任务调度
 * Task任务调度器可以实现任务的调度和删除
 * 原理:
 * 实现一个类：ThreadPoolTaskScheduler线程池任务调度器，能够开启线程池进行任务调度
 * ThreadPoolTaskScheduler.schedule（）方法会创建一个定时计划ScheduleFuture,
 * 在这个方法中添加两个参数一个是Runable:线程接口类，和CronTrigger(定时任务触发器)
 * 在ScheduleFuture中有一个cancel可以停止定时任务
 * @author Admin
 * 
 * Scheduled Task是一种轻量级的任务定时调度器，相比于Quartz,减少了很多的配置信息，但是Scheduled Task
 * 不适用于服务器集群，引文在服务器集群下会出现任务被多次调度执行的情况，因为集群的节点之间是不会共享任务信息的
 * 每个节点的定时任务都会定时执行
 *
 */
@EnableScheduling
public class DynamicTask {

	@Autowired
	private ThreadPoolTaskScheduler threadPoolTaskScheduler;
	
	private ScheduledFuture<?> future;
	
	@Bean
	public ThreadPoolTaskScheduler trPoolTaskScheduler(){
		return new ThreadPoolTaskScheduler();
	} 
	/**
	 * 1，定义一个方法实现定时任务的启动
	 * 2，定义一个方法实现用于终止定时任务
	 * 3，修改定时任务时间：changeCron
	 */
	/**
	 * 启动定时器
	 * @return
	 */
	@RequestMapping("startTest")
	public String StartTest(){
		/**
		 * task:定时任务要执行的方法
		 * trigger:定时任务执行的时间
		 */
		future=threadPoolTaskScheduler.schedule(new myRunable(),new CronTrigger("0/5 * * * * *") );
		
		return "startTest";
	}
	
	/**
	 * 停止定时任务
	 * @return
	 */
	@RequestMapping("endTask")
	public String endTask(){
		if(future!=null){
			future.cancel(true);
		}
		System.out.println("endTask");
		return "endTask";
	}
	
	/**
	 * 改变调度的时间
	 * 步骤：
	 * 1,先停止定时器
	 * 2,在启动定时器
	 */
	@RequestMapping("changeTask")
	public String changeTask(){
		//停止定时器
		endTask();
		//定义新的执行时间
		future=threadPoolTaskScheduler.schedule(new myRunable(),new CronTrigger("0/10 * * * * *") );
		//启动定时器
		StartTest();
		System.out.println("changeTask");
		return "changeTask";
	}
	
	/**
	 * 定义定时任务执行的方法
	 * @author Admin
	 *
	 */
	public class myRunable implements Runnable{
		@Override
		public void run() {
			System.out.println("定时任务要执行的方法"+new Date());
		}
		
	}
	
	}
