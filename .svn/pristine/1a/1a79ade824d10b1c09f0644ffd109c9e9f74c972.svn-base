package com.ztessc.einvoice.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.serializer.SerializerFeature;

public class PageData extends HashMap<String,Object> implements Map<String,Object>{
	
	private static final long serialVersionUID = 1L;
	HttpServletRequest request;
	
	public PageData() {
	}
	
	public PageData(HttpServletRequest request){
		this.request = request;
		@SuppressWarnings("unchecked")
		Map<String, Object> map = (Map<String, Object>) ((request instanceof MultipartHttpServletRequest) ? (ReflectHelper
				.getValueByFieldName(request, "multipartParameters")) : request.getParameterMap());
		if(map == null ||map.isEmpty()){
			return;
		}
		String value;
		for (Map.Entry<String, Object> e : map.entrySet()) {
			value = "";
			if (e.getValue() != null) {
				if (e.getValue() instanceof String[]) {
					for (String v : (String[]) e.getValue()) {
						value += "," + v;
					}
					value = value.substring(1);
				} else {
					value = e.getValue().toString();
				}
			}
			super.put(e.getKey(), value.trim());
		}
	}
	
	public String getString(String key) {
		return get(key) == null ? "" : get(key).toString();
	}
	
	private static String columnNameToFieldName(String param) {
        if (param == null || "".equals(param.trim())) {
            return param;
        }
        param = param.toLowerCase();
        int len = param.length();
        StringBuilder sb = new StringBuilder(len);
        for (int i = 0; i < len; i++) {
            char c = param.charAt(i);
            if (c == '_') {
                if (++i < len) {
                    sb.append(Character.toUpperCase(param.charAt(i)));
                }else {
                	sb.append("_");
                }
            } else {
                sb.append(c);
            }
        }
        return sb.toString();
    }

	public static PageData columnNamesToFieldNames(PageData pd) {
		if(pd == null) {
			return pd;
		}
		PageData pdNew = new PageData();
		for(Map.Entry<String, Object> entry : pd.entrySet() ) {
			pdNew.put(columnNameToFieldName(entry.getKey()), entry.getValue());
		}
        return pdNew;
	}
	
	public static List<PageData> columnNamesToFieldNames(List<PageData> list) {
		if(list != null && list.size() > 0) {
			List<PageData> temp = new ArrayList<PageData>(list.size());
			for (PageData pd : list) {
				PageData pdNew = new PageData();
				for(Map.Entry<String, Object> entry : pd.entrySet() ) {
					pdNew.put(columnNameToFieldName(entry.getKey()), entry.getValue());
				}
				temp.add(pdNew);
			}
			return temp;
		}
		return list;
	}
	
	public void fillCreatedData(){
		this.put("id",UuidUtil.getUUID());
		this.put("createdDt", DateUtil.getCurrentDateTime());
		this.put("createdUserId", ShiroUtil.getCurrentUserId());
	}
	
	public void fillUpdatedData(){
		this.put("updatedDt", DateUtil.getCurrentDateTime());
		this.put("updatedUserId", ShiroUtil.getCurrentUserId());
	}
	
	@SuppressWarnings("unchecked")
	public List<PageData> transDataToPdList(String name) {
		List<PageData> pdList = new ArrayList<PageData>();

		List<Map<String, Object>> list = (List<Map<String, Object>>) JSONArray.parse(this.getString(name));
		
		if(list != null && list.size() > 0) {
			PageData pd = null;
			for(Map<String, Object> map : list) {
				pd = new PageData();
				pd.putAll(map);
				pdList.add(pd);
			}
		}
		return pdList;
	}
	
	public void transEmptyToNull() {
		List<String> keys = new ArrayList<String>();
		for(String key : (Set<String>)this.keySet()) {
			if(StringUtils.isEmpty(this.getString(key))) {
				keys.add(key);
			}
		}
		for (String key : keys) {
			this.remove(key);
		}
	}
	
	public String toString(){
		return JSON.toJSONString(this, SerializerFeature.WriteMapNullValue);
	}
}
